{"ts":1358706739782,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"/* --------------------------\nan enemy Entity\n------------------------ */\nvar EnemyEntity = me.ObjectEntity.extend({\n    init: function(x, y, settings) {\n        // define this here instead of tiled\n        settings.image = \"wheelie_right\";\n        settings.spritewidth = 64;\n \n        // call the parent constructor\n        this.parent(x, y, settings);\n \n        this.startX = x;\n        this.endX = x + settings.width - settings.spritewidth;\n        // size of sprite\n \n        // make him start from the right\n        this.pos.x = x + settings.width - settings.spritewidth;\n        this.walkLeft = true;\n \n        // walking & jumping speed\n        this.setVelocity(4, 6);\n \n        // make it collidable\n        this.collidable = true;\n        // make it a enemy object\n        this.type = me.game.ENEMY_OBJECT;\n \n    },\n \n    // call by the engine when colliding with another object\n    // obj parameter corresponds to the other object (typically the player) touching this one\n    onCollision: function(res, obj) {\n \n        // res.y >0 means touched by something on the bottom\n        // which mean at top position for this one\n        if (this.alive && (res.y > 0) && obj.falling) {\n            this.flicker(45);\n        }\n    },\n \n    // manage the enemy movement\n    update: function() {\n        // do nothing if not visible\n        if (!this.visible)\n            return false;\n \n        if (this.alive) {\n            if (this.walkLeft && this.pos.x <= this.startX) {\n                this.walkLeft = false;\n            } else if (!this.walkLeft && this.pos.x >= this.endX) {\n                this.walkLeft = true;\n            }\n            // make it walk\n            this.flipX(this.walkLeft);\n            this.vel.x += (this.walkLeft) ? -this.accel.x * me.timer.tick : this.accel.x * me.timer.tick;\n                 \n        } else {\n            this.vel.x = 0;\n        }\n         \n        // check and update movement\n        this.updateMovement();\n         \n        // update animation if necessary\n        if (this.vel.x!=0 || this.vel.y!=0) {\n            // update objet animation\n            this.parent(this);\n            return true;\n        }\n        return false;\n    }\n});\n"]],"start1":0,"start2":0,"length1":0,"length2":2193}]],"length":2193}
