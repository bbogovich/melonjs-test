{"ts":1358706845586,"silentsave":true,"restoring":false,"patch":[[]],"length":0}
{"contributors":[],"silentsave":false,"ts":1358706852588,"patch":[[{"diffs":[[1,"var app = require('http').createServer(handler)\n, io = require('socket.io').listen(app)\n, fs = require('fs')\n\napp.listen(process.env.PORT || 8001);\n\nfunction handler (req, res) {\nfs.readFile('index.html',\nfunction (err, data) {\nif (err) {\nres.writeHead(500);\nreturn res.end('Error loading index.html');\n}\n\nres.writeHead(200, {'Content-Type': 'text/html', \"Content-Length\": data.length});\nres.end(data);\n});\n}\n\nio.sockets.on('connection', function (socket) {\n// echo the message\nsocket.on('message', function (data) {\nconsole.info(data);\nsocket.send(\"[ECHO] \"+data);\n});\n});"]],"start1":0,"start2":0,"length1":0,"length2":573}]],"length":573,"saved":false}
{"ts":1358707948748,"patch":[[{"diffs":[[0,"var "],[-1,"app = require('http').createServer(handler)\n, io = require('socket.io').listen(app)\n, fs = require('fs')\n\napp.listen(process.env.PORT || 8001);\n"],[1,"System = require(\"util\");\nvar fs = require('fs');\nvar HTTP = require(\"http\");\n\nvar WebSocketServer = require(\"websocket\").server;\nvar index = fs.readFileSync('index.html');\n//var gameEngine = require(\"./GameEngine\");\n\nvar MaxConnections = 10;\nvar Connections = {};\n\nfunction ObjectSize(Obj)\n{\n    var Size = 0;\n\tfor (var Key in Obj)\n\t\tif (Obj.hasOwnProperty(Key))\n\t\t\tSize++;\n\treturn Size;\n}\n\nfunction SendGameState()\n{\n    /*\n\tvar messagePlayers = [];\n\tvar messageMissiles = [];\n\tvar players = gameEngine.gameState.players;\n\tvar missiles = gameEngine.gameState.missiles;\n\tfor (var i in players){\n\t\tmessagePlayers.push(players[i]);\n\t}\n\tfor (i in missiles){\n\t\tmessageMissiles.push(missiles[i]);\n\t}\n\tfor (var ID in Connections){\n\t\tConnections[ID].sendUTF(JSON.stringify({\n\t\t\t\ttransactionId:new Date().getTime(),\n\t\t\t\tmessageType:\"game.defaultgame.outbound.GameStateMessage\",\n\t\t\t\tplayers:messagePlayers,\n\t\t\t\tmissiles:messageMissiles,\n\t\t\t\tpaused:gameEngine.gameState.paused,\n\t\t\t\tstarted:gameEngine.gameState.started\n\t\t\t}));\n\t}\n    */\n}\n\n/*\n * When a websocket disconnects\n * */"],[0,"\nfun"]],"start1":0,"start2":0,"length1":152,"length2":1079},{"diffs":[[0,"ion "],[-1,"h"],[1,"H"],[0,"andle"],[-1,"r (req, res) {\nfs.readFile('index.html',\nfunction (err, data) {\nif (err) {\nres.writeHead(500);\nreturn res.end('Error loading index.html');\n}\n\nres"],[1,"ClientClosure(ID)\n{\n\tif (ID in Connections)\n\t{\n\t\tSystem.log(\"Disconnect from \" + Connections[ID].IP);\n\t\tdelete Connections[ID];\n\t\tgameEngine.removePlayer(ID);\n\t}\n}\n\nfunction HandleClientMessage(ID, Message)\n{\n\t// Check that we know this client ID and that the message is in a format we expect.\n\tif (!(ID in Connections)) return;\n\tSystem.log(\"HandleClientMessage(\"+ID+\",\"+Message+\") \");\n\tif(Connections[ID]){\n\t\tvar connection = Connections[ID];\n\t\tconnection.sendUTF(JSON.stringify({\n\t\t\t\ttransactionId:new Date().getTime(),\n\t\t\t\tmessageType:\"ACK\",\n\t\t\t\trxId:Message.transactionId\n\t\t}));\n\t\tif(Message.messageType){\n\t\t\tswitch(Message.messageType){\n\t\t\t\tcase \"game.inbound.GameRegistrationMessage\":\n\t\t\t\t\t//gameEngine.initPlayer(ID);\n\t\t\t\t\tconnection.sendUTF(JSON.stringify({\n\t\t\t\t\t\t\ttransactionId:new Date().getTime(),\n\t\t\t\t\t\t\tmessageType:\"game.outbound.RegistrationSuccessMessage\",\n\t\t\t\t\t\t\tsessionId:connection.ID\n\t\t\t\t\t\t}));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t//gameEngine.addPlayerMessage(ID,Message);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tSystem.log(\"HandleClientMessage: Exiting\");\n}\n\n//Creates an HTTP server that will respond with a simple blank page when accessed.\nvar HTTPServer = HTTP.createServer(\n\t\tfunction(Request, Response) {\n\t\t\tSystem.log(Request);\n\t\t\tfor (var i in Request){\n\t\t\t\tif(typeof(Request[i])!=\"function\"){\n\t\t\t\t\tSystem.log(i+\": \"+(typeof(i)!=\"function\"?Request[i]:\"[function Function]\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\tvar content;\n\t\t\ttry{\n\t\t\t\tvar url=Request.url;\n\t\t\t\tif(url==\"/\"){\n\t\t\t\t\turl=\"/index.html\";\n\t\t\t\t}\n\t\t\t\tcontent = fs.readFileSync(url.replace(/^\\//,\"\"));\n\t\t\t\tvar urlMatch = url.match(/\\.([^$]+)$/);\n\t\t\t\tvar contentType=\"text/plain\";\n\t\t\t\tif(urlMatch!==null){\n\t\t\t\t\tswitch(urlMatch[1].toLowerCase()){\n\t\t\t\t\t\tcase \"html\":\n\t\t\t\t\t\t\tcontentType=\"text/html\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase \"js\":\n\t\t\t\t\t\t\tcontentType=\"application/javascript\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tResponse"],[0,".wri"]],"start1":1081,"start2":1081,"length1":159,"length2":1868},{"diffs":[[0,"d(200, {"],[-1,"'"],[1," \""],[0,"Content-"]],"start1":2954,"start2":2954,"length1":17,"length2":18},{"diffs":[[0,"Type"],[-1,"': 'text/html', \"Content-Length\": data.length});\nres.end(data);\n});\n}\n\nio.sockets.on('connection', function (socket) {\n// echo the message\nsocket"],[1,"\": contentType });\n\t\t\t}catch(e){\n\t\t\t\tcontent=\"404!!!\";\n\t\t\t\tResponse.writeHead(404, { \"Content-Type\": \"text/plain\" });\n\t\t\t}\n\t\t\tResponse.end(content);\n\t\t}\n\t);\n\n// Starts the HTTP server on port 9001.\nHTTPServer.listen(9001, function() {\n\t\tSystem.log(\"Listening for connections on port 9001\"); \n\t}\n);\n\n// Creates a WebSocketServer using the HTTP server just created.\nvar Server = new WebSocketServer(\n\t{\n\t\thttpServer: HTTPServer,\n\t\tcloseTimeout: 2000\n\t}\n);\n\nfunction handleWebSocketRequest(Request){\n\tif (ObjectSize(Connections) >= MaxConnections) {\n\t\tRequest.reject();\n\t\treturn;\n\t}\n\n\tvar Connection = Request.accept(null, Request.origin);\n\tConnection.IP = Request.remoteAddress;\n\n\t// Assign a random ID that hasn't already been taken.\n\tdo {\n\t\tConnection.ID = Math.floor(Math.random() * 100000);\n\t} while (Connection.ID in Connections);\n\n\tConnections[Connection.ID] = Connection;\n\tConnection.sendUTF(JSON.stringify({\n\t\t\t\ttransactionId:new Date().getTime(),\n\t\t\t\tmessageType:\"game.outbound.SessionCreatedMessage\",\n\t\t\t\tsessionId:Connection.ID\n\t\t\t}));\n\tConnection"],[0,".on("],[-1,"'"],[1,"\""],[0,"message"],[-1,"', "],[1,"\",\n\t\t\t"],[0,"function"],[-1," (data) {\nconsole.info(data);\nsocket.send(\"[ECHO] \"+data);\n});\n}"],[1,"(Message){\n\t\t\t\tSystem.log(\"onMessage:\"+Message);\n\t\t\t\tfor (var i in Message){\n\t\t\t\t\tSystem.log(i+\": \"+Message[i]);\n\t\t\t\t}\n\t\t\t\t// All of our messages will be transmitted as unicode text.\n\t\t\t\tif (Message.type == \"utf8\")\n\t\t\t\t\tHandleClientMessage(Connection.ID, JSON.parse(Message.utf8Data));\n\t\t\t}\n\t);\n\tConnection.on(\"close\",function(){\n\t\t\tHandleClientClosure(Connection.ID);\n\t\t}\n\t);\n\tSystem.log(\"Logged in \" + Connection.IP + \"; currently \" + ObjectSize(Connections) + \" users.\");\n};\n//When a client connects...\nServer.on(\"request\",handleWebSocketRequest);\n\nfunction gameRunner(){\n\t//if(gameEngine.runGameFrame()){\n\t//\tSendGameState();\n\t//}\n\tsetTimeout(gameRunner,10/*gameEngine.FRAME_INTERVAL*/);\n}\ngameRunner("],[0,");"]],"start1":2972,"start2":2972,"length1":238,"length2":1793}]],"length":4765,"saved":false}
{"ts":1358709428888,"patch":[[{"diffs":[[0,"on port "],[-1,"9"],[1,"50"],[0,"00"],[-1,"1"],[0,".\nHTTPSe"]],"start1":3160,"start2":3160,"length1":20,"length2":20},{"diffs":[[0,".listen("],[-1,"9"],[1,"50"],[0,"00"],[-1,"1"],[0,", functi"]],"start1":3184,"start2":3184,"length1":20,"length2":20},{"diffs":[[0,"ort "],[-1,"9"],[1,"50"],[0,"00"],[-1,"1"],[0,"\"); "]],"start1":3255,"start2":3255,"length1":12,"length2":12}]],"length":4765,"saved":false}
